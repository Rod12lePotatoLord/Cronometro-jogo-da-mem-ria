import random
import time

# Tempo restante da fase anterior
tempo_restante_fase_anterior = 0

def criar_tabuleiro(tamanho):
    # Lista de 32 símbolos únicos
    simbolos = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')[:32]
    pares_necessarios = (tamanho * tamanho) // 2
    simbolos = simbolos[:pares_necessarios] * 2  # Duplicar símbolos para formar pares
    random.shuffle(simbolos)
    return [simbolos[i * tamanho:(i + 1) * tamanho] for i in range(tamanho)]

def mostrar_tabuleiro(tabuleiro, visivel):
    print(" ", end=" ")
    for i in range(len(tabuleiro)):
        print(i, end=" ")
    print()
    for i, linha in enumerate(tabuleiro):
        print(i, end=" ")
        for j, simbolo in enumerate(linha):
            if visivel[i][j]:
                print(simbolo, end=' ')
            else:
                print('*', end=' ')
        print()

def iniciar_fase(duracao_fase):
    global tempo_restante_fase_anterior

    tempo_inicial = time.time()
    tempo_final = tempo_inicial + duracao_fase
    
    # Usar o tempo restante da fase anterior, se houver
    tempo_final += tempo_restante_fase_anterior
    tempo_restante_fase_anterior = 0
    
    print(f"\nIniciando fase com tempo total de {duracao_fase + tempo_restante_fase_anterior:.2f} segundos.")
    
    while time.time() < tempo_final:
        tempo_restante = tempo_final - time.time()
        print(f"Tempo restante na fase: {tempo_restante:.2f} segundos", end="\r")
        time.sleep(1)
    
    print("\nFase concluída!")
    tempo_restante_fase_anterior = tempo_final - time.time()
    print(f"Tempo restante guardado para a próxima fase: {tempo_restante_fase_anterior:.2f} segundos.")

def jogo_da_memoria():
    nivel = 1
    tamanho = 4

    while nivel <= 5:
        duracao_fase = 180 + (nivel - 1) * 30  # Exemplo de duração: 180s no nível 1, 210s no nível 2, etc.
        print(f"\nBem-vindo ao Nível {nivel}!")
        
        # Iniciar fase com temporizador
        iniciar_fase(duracao_fase)
        
        tabuleiro = criar_tabuleiro(tamanho)
        visivel = [[False] * tamanho for _ in range(tamanho)]
        tentativas = 0

        while not all(all(linha) for linha in visivel):
            mostrar_tabuleiro(tabuleiro, visivel)
            print("\n" + "-" * (tamanho * 2 + 1) + "\n")  # Linha de separação

            try:
                x1, y1 = map(int, input("Escolha a primeira carta (linha coluna): ").split())
                x2, y2 = map(int, input("Escolha a segunda carta (linha coluna): ").split())
            except ValueError:
                print("Entrada inválida. Por favor, insira as coordenadas no formato 'linha coluna'.")
                continue

            if (x1 == x2 and y1 == y2) or visivel[x1][y1] or visivel[x2][y2]:
                print("Seleção inválida. Tente novamente.")
                continue

            visivel[x1][y1] = True
            visivel[x2][y2] = True
            mostrar_tabuleiro(tabuleiro, visivel)
            print("\n" + "-" * (tamanho * 2 + 1) + "\n")  # Linha de separação

            if tabuleiro[x1][y1] != tabuleiro[x2][y2]:
                visivel[x1][y1] = False
                visivel[x2][y2] = False

            tentativas += 1

        print(f"Você venceu o Nível {nivel} em {tentativas} tentativas!")
        nivel += 1
        tamanho += 1

if __name__ == "__main__":
    jogo_da_memoria()
